每次commit都会生成一个哈希值。输入$ git log --oneline会列举出哈希值及提交时到注释。

需求：有时commit 提交了，却发现当前版本不如某个历史版本，需要将内容回退到某个历史版本；
      有时commit 提交了，但又发现注释写得不够完善，想再次修改......
方法：利用哈希值及相应的指令可实现上述需求，以下将通过一个文档test.txt进行说明。


#编辑test.txt，并完成两次操作：写1并提交，写2并提交
$ vi test.txt
$ git add test.txt 
$ git commit -m "write 1"               test.txt写1并提交
On branch master
nothing to commit, working tree clean
$ vi test.txt 
$ git add test.txt 
$ git commit -m "write 2"               test.txt写2并提交
[master 161c02e] write 2
 1 file changed, 1 insertion(+)
$ git log --oneline                     查看两次提交的哈希值
161c02e (HEAD -> master) write 2
fb8a6ca writ 1

#从当前版本回退到某一历史版本，且本地源码也回退到该历史版本 
$ git reset --hard fb8a6ca              利用git reset --hard回退到哈希值fb8a6ca对应版本，此时可test.txt内容为1
HEAD is now at fb8a6ca write 1
$ git log --oneline
fb8a6ca (HEAD -> master) write 1         提交历史也被删除了

#执行完上述操作后，又后悔了，想看全部的提交历史，且想回到最后的那个版本
$ git reflog --oneline                  git reflog记录所有操作，包括所有HAED的变动情况，以及对应的HEAD的哈希值，比git log更强大
fb8a6ca (HEAD -> master) HEAD@{0}: reset: moving to fb8a6ca
161c02e HEAD@{1}: commit: write 2
fb8a6ca (HEAD -> master) HEAD@{2}: commit (initial): write 1
$ git reset --hard 161c02e              再次利用git reset --hard，回退到哈希值161c02e对应版本，此时可test.txt内容为2
HEAD is now at 9c95d81 write 2

备注：
（1）利用git reset --hard内容会回退到某个历史版本，且位于该历史版本之后的提价历史会被删除；
（2）git reset --soft或git reset --mixed，内容会保留在最新版本上，但HEAD回退到某历史版本，即该历史版本之后的提交历史被删除；
（3）有时commit 提交了，但又发现注释写得不够完善，想再次修改，就可以利用git commit --soft HEAD^（删除最新一次的提交历史），修改后重新提交即可；
（4）回退到历史版本，git reset是一种方法，除此之外，还有git revert等。
参考链接：
https://blog.csdn.net/Kevin_cc98/article/details/78313113
